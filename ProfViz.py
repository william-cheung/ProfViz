import os
import sys

from PyQt4.QtCore import *
from PyQt4.QtGui import *

APPNAME = 'ProfViz'
AUTHOR  = 'William Cheung'
DATE    = 'Mar. 2016'
COMPANY = 'Netease, Inc.'

ABOUT = "<p>" \
        "<font face=\"Georgia\" color=\"red\"><b>" \
        + APPNAME + \
        "</b></font>" \
        " is a pstats viewer developed using " \
        "<a href=\"https://sourceforge.net/projects/pyqt/\">PyQt</a>." \
        "</p>" \
        "<p>" \
        "Pstats files are generated by profilers (\'cProfile\' and " \
        "\'profile\') in Python Standard Library. ProfViz can be used to view" \
        " pstats files and can display useful diagrams for optimizing your " \
        "Python code. You may need a " \
        "<a href=\"www.graphviz.org\"> Graphviz</a> " \
        "installation on your system for displaying callgraph. Enjoy it ! :)" \
        "</p>" \
        "<p>" \
        + \
        APPNAME + " is developed by " + AUTHOR + " at " + COMPANY + ", " + DATE \
        + \
        "</p>"


DEFAULT_WINDOW_WIDTH     = 1024
DEFAULT_WINDOW_HEIGHT    = 640
DEFAULT_FONT             = QFont("Courier New", 10)
DEFAULT_TABLE_ROWHEIGHT  = 20

DEFAULT_CALLGRAPH_DLG_WIDTH  = 800
DEFAULT_CALLGRAPH_DLG_HEIGHT = 600

CALLGRAPH_DLG_CONTROLS = "\n Zoom In : Ctrl+Mouse Wheel or Ctrl++\n" \
                         "\n Zoom Out : Ctrl+Mouse Wheel or Ctrl+-\n" \
                         "\n Drag : Shift+Left Mouse Button\n" \
                         "\n Actual Size : Ctrl+=\n" \
                         "\n Fit to Window : Ctrl+Enter\n" \
                         "\n Center Image : Space\n"


INLINETIME_LABEL = '(Inline Time)'


DEFAULT_REMOTE_HOST = '127.0.0.1'
DEFAULT_REMOTE_PORT = '18812'


def createStatsTable(summary, entries):
    from vProfile import simple_code_format
    stats_header = ['index',   # for simplifying our implementation; we do not show this column in views
                    'func', 'file:ln', 'ncall', 'tottime', 'percall', 'cumtime', 'percall', 'pct (%)']
    stats_table = []
    index = 0
    for entry in entries:
        inlinetime_percall, totaltime_percall = '-', '-'
        if entry.callcount > 0:
            inlinetime_percall = "%.3f" % (entry.inlinetime / entry.callcount)
            totaltime_percall  = "%.3f" % (entry.totaltime / entry.callcount)

        name, where = simple_code_format(entry.code)
        rowdata = list((index,
                        name,
                        where,
                        entry.callcount,
                        "%.3f" % entry.inlinetime,
                        inlinetime_percall,
                        "%.3f" % entry.totaltime,
                        totaltime_percall,
                        "%6.2f" % (100.0 * entry.totaltime / summary),
                        ))
        stats_table.append(rowdata)
        index += 1
    return stats_header, stats_table


def getCodeLabel(code):
    from vProfile import simple_code_format
    return '%s [%s]' % simple_code_format(code)


def validateIPAddress(ip):
    pattern = "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}" \
              "([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$"
    import re
    match = re.findall(pattern, ip)
    return len(match) == 1


def loadStats(datafile):
    load_methods = [loadPstats, loadVstats]
    for method in load_methods:
        ret = method(datafile)
        if ret:
            return ret
    return None


def loadPstats(datafile):
    import vProfile
    try:
        pstats = vProfile.load_pstats(datafile)
        return vProfile.pstats2vstats(pstats)
    except:
        print 'Exception Occured in loadPStats!'
        return None


def loadVstats(datafile):
    import vProfile
    try:
        return vProfile.load_vstats(datafile)
    except:
        print 'Exception Occured in loadVStats!'
        return None


class MyWindow(QMainWindow):
    def __init__(self, *args):
        QWidget.__init__(self, *args)
        
        self.setWindowTitle(APPNAME)
        self.setMinimumWidth(DEFAULT_WINDOW_WIDTH)
        self.setMinimumHeight(DEFAULT_WINDOW_HEIGHT)
        self.setFont(DEFAULT_FONT)

        self._title_base = APPNAME
        
        self.initMenuBar()

        self._piechart_dialog = PieChartDialog('Callees\' Pie Chart', self)

        # settings for callgraph dialog
        self._thresholds = ('1', '0.1', '0.01', '0.001', '0.0001', '0')
        self._threshold_index = 2   # default threshold_index
        self._default_threshold = self._thresholds[self._threshold_index]

        self._callgraph_window = ImageWindow('Callgraph', self)

        self._filtfunc_label = QLabel('Func Filter:')
        self._funcfilter_lineedit = QLineEdit()
        self._funcfilter_lineedit.textChanged.connect(self.onStatsFilter)
        self._filtfile_label = QLabel('File Filter:')
        self._filefilter_lineedit = QLineEdit()
        self._filefilter_lineedit.textChanged.connect(self.onStatsFilter)

        self._stats_tableview = MyTableView()

        stats_tabwidget = self.createStatsTabWidget('Stats')

        self._callers_tableview = MyTableView()
        self._callees_tableview = MyTableView()

        calls_tabwidget = self.createCallsTabWidget('Callees', 'Callers')

        grid_layout = QGridLayout()
        grid_layout.addWidget(stats_tabwidget, 0, 0, 3, 5)
        grid_layout.addWidget(calls_tabwidget,  3, 0, 2, 5)

        widget = QWidget()
        widget.setLayout(grid_layout)
        self.setCentralWidget(widget)

        self._vstats = {}
        self.initVstatsRelatedAttributes()

        self._pstats_file = ''
        self.loadStats(self._pstats_file)
        self.initTableViews()

    def initMenuBar(self):
        menubar = self.menuBar()

        fileMenu = menubar.addMenu(self.tr('&File'))
        fileMenu.addAction(QAction('Open...', self,
                                   shortcut='Ctrl+O', triggered=self.showFileDialog))
        fileMenu.addAction(QAction('Save As...', self,
                                   shortcut='Ctrl+S', triggered=self.saveStats))
        fileMenu.addSeparator()
        fileMenu.addAction(QAction('Settings...', self,
                                   shortcut='Ctrl+Alt+S', triggered=self.showSettingsDialog))
        fileMenu.addSeparator()
        fileMenu.addAction(QAction('Exit', self,
                                   shortcut=QKeySequence.Quit, triggered=qApp.closeAllWindows))

        viewMenu = menubar.addMenu(self.tr('&View'))
        viewMenu.addAction(QAction('Callgraph', self,
                                   shortcut='Ctrl+G', triggered=self.showCallgraphDialog))
        viewMenu.addAction(QAction('Callees\' Pie Chart', self,
                                   shortcut='Ctrl+L', triggered=self.showPieChartDialog))

        helpMenu = menubar.addMenu(self.tr('&Help'))
        helpMenu.addAction(QAction('About', self, triggered=self.showAboutDialog))
        helpMenu.addAction(QAction('About Qt', self, triggered=qApp.aboutQt))

    def createStatsTabWidget(self, title):
        grid_layout1 = QGridLayout()
        grid_layout1.addWidget(self._filtfunc_label, 0, 0, 2, 1)
        grid_layout1.addWidget(self._funcfilter_lineedit, 0, 1, 2, 9)

        grid_layout2 = QGridLayout()
        grid_layout2.addWidget(self._filtfile_label, 0, 0, 2, 1)
        grid_layout2.addWidget(self._filefilter_lineedit, 0, 1, 2, 9)

        grid_layout3 = QGridLayout()
        grid_layout3.addItem(grid_layout1)
        grid_layout3.addItem(grid_layout2)
        grid_layout3.setSpacing(0)

        grid_layout = QGridLayout()
        grid_layout.addItem(grid_layout3, 0, 0, 3, 1)
        grid_layout.addWidget(self._stats_tableview, 3, 0, 12, 1)

        widget = QWidget()
        widget.setLayout(grid_layout)
        stats_tabwidget = QTabWidget()
        stats_tabwidget.addTab(widget, title)

        return stats_tabwidget

    def createCallsTabWidget(self, callees_tabtitle, callers_tabtitle):
        grid_layout1 = QGridLayout()
        grid_layout1.addWidget(self._callees_tableview)
        widget1 = QWidget()
        widget1.setLayout(grid_layout1)

        grid_layout2 = QGridLayout()
        grid_layout2.addWidget(self._callers_tableview)
        widget2 = QWidget()
        widget2.setLayout(grid_layout2)

        calls_tabwidget = QTabWidget()
        calls_tabwidget.addTab(widget1, callees_tabtitle)
        calls_tabwidget.addTab(widget2, callers_tabtitle)
        return calls_tabwidget

    def setTitleDetails(self, details):
        self.setWindowTitle("%s - %s" % (self._title_base, details))

    def loadStats(self, datafile):
        vstats = loadStats(datafile)
        if not vstats:
            return False
        self._vstats = vstats
        self._pstats_file = datafile

        self.initVstatsRelatedAttributes()
        self.setTitleDetails(datafile)
        return True

    def initVstatsRelatedAttributes(self):
        from vProfile import vstats_summary
        self._summary = vstats_summary(self._vstats)
        self._funcs = list(self._vstats.keys())
        self._selected_func = None

        self._filtered_vstats = self._vstats
        self._filtered_funcs  = self._funcs

    def initTableViews(self):
        entries = [self._filtered_vstats[func] for func in self._filtered_funcs]
        stats_header, stats_table = createStatsTable(self._summary, entries)

        model = MyTableModel(stats_header, stats_table, self._stats_tableview)
        self._stats_tableview.setModel(model)
        self._stats_tableview.setOnSelectionChanged(self.onSelectionChanged)
        self._callers_tableview.setModel(MyTableModel(stats_header, []))
        self._callees_tableview.setModel(MyTableModel(stats_header, []))

    def onSelectionChanged(self, selected, deselected):
        indexes = selected.indexes()
        if not indexes:
            return

        # get the selected func
        model = self._stats_tableview.model()
        row = indexes[0].row()
        index, ok = model.data(model.index(row, 0), Qt.DisplayRole).toInt()
        if not ok:
            return
        func = self._filtered_funcs[index]
        self._selected_func = func

        # refresh _callees_tableview
        callee_entries = [self._vstats[callee] for callee in self._vstats[func].callees]
        self._callees_tableview.setModel(MyTableModel(*createStatsTable(self._summary, callee_entries)))

        # refresh _callers_tableview
        import vProfile
        caller_map = vProfile.vstats2callermap(self._vstats)
        callers = []
        if func in caller_map:
            callers = [caller for caller in caller_map[func]]
        caller_entries = [self._vstats[caller] for caller in callers]
        self._callers_tableview.setModel(MyTableModel(*createStatsTable(self._summary, caller_entries)))

        self.updatePieChartDialog()

        self.updateCallgraphDialog()

    def updatePieChartDialog(self):
        if not self._piechart_dialog.isVisible():
            return

        func = self._selected_func

        callee_data = [subentry.totaltime for _, subentry in self._vstats[func].callees.iteritems()]
        callee_data.append(self._vstats[func].inlinetime)
        if len(callee_data) > 0 and callee_data[0] < 0.0:
            callee_data = []

        labels = []
        if callee_data:
            callee_entries = [self._vstats[callee] for callee in self._vstats[func].callees]
            for entry in callee_entries:
                labels.append(getCodeLabel(entry.code))
            labels.append(INLINETIME_LABEL)
        data = zip(callee_data, labels)
        data.sort(key=lambda item: item[0], reverse=True)
        data = zip(*data)
        if data:
            self._piechart_dialog.setData(data[0], data[1])
        else:
            self._piechart_dialog.setData([], [])
        self._piechart_dialog.setTitleDetails(getCodeLabel(self._vstats[func].code))

    def updateCallgraphDialog(self):
        if not self._callgraph_window.isVisible():
            return

        pixmap = self.createCallgraph()
        if pixmap:
            func = self._selected_func
            self._callgraph_window.setTitleDetails(getCodeLabel(self._vstats[func].code))
            self._callgraph_window.setPixmap(pixmap)

    def onStatsFilter(self):
        filefilter_pattern = str(self._filefilter_lineedit.text()).strip()
        funcfilter_pattern = str(self._funcfilter_lineedit.text()).strip()

        self._filtered_vstats = self._vstats

        vstats = None
        if filefilter_pattern:
            vstats = {}
            for func, entry in self._filtered_vstats.iteritems():
                filename = os.path.basename(entry.code.co_filename)
                if filename.find(filefilter_pattern) != -1:
                    vstats[func] = entry

        if funcfilter_pattern:
            if vstats is not None:
                self._filtered_vstats = vstats
            from vProfile import simple_funcname
            vstats = {}
            for func, entry in self._filtered_vstats.iteritems():
                name = simple_funcname(entry.code.co_name)
                if name.find(funcfilter_pattern) != -1:
                    vstats[func] = entry

        if vstats is not None:
            self._filtered_vstats = vstats

        self._filtered_funcs = list(self._filtered_vstats.keys())
        self.initTableViews()

    def createCallgraph(self):
        from tempfile import NamedTemporaryFile
        from vstats2dot import vstats2dot
        from subprocess import call

        dot_fp = NamedTemporaryFile(delete=False)
        dot_fp.close()
        png_fp = NamedTemporaryFile(delete=False)
        png_fp.close()

        def __on_exit():
            os.remove(dot_fp.name)
            os.remove(png_fp.name)

        callgraph_threshold = eval(self._thresholds[self._threshold_index])
        vstats2dot(self._vstats, self._selected_func,
                   outfile=dot_fp.name,
                   threshold=callgraph_threshold,
                   summary=self._summary)

        if call(['dot', '-Tpng', dot_fp.name, '-o', png_fp.name], shell=True):
            QMessageBox().information(self, 'Error',
                                      'Failed to execute dot.exe, please make sure the '
                                      'Graphviz executables are on your system path')
            __on_exit()
            return None

        pixmap = QPixmap(png_fp.name)
        __on_exit()
        return pixmap

    def showFileDialog(self):
        filename = QFileDialog.getOpenFileName(caption='Open file',
                                               directory=os.path.dirname(self._pstats_file))
        if filename == '':
            return
        if self.loadStats(str(filename)):
            self.initTableViews()
        else:
            QMessageBox().information(self, 'Error', 'The file does not exist or is not a pstats/vstats file')

    def saveStats(self):
        if not self._vstats:
            QMessageBox().information(self, 'Error', 'You have no data to be saved')
            return

        filename = QFileDialog.getSaveFileName(self, 'Save As...', 'profviz.vstats', self.tr('*.vstats'))
        if filename:
            from vProfile import dump_vstats
            dump_vstats(self._vstats, filename)

    def showSettingsDialog(self):
        thres, ok = QInputDialog.getItem(self, 'Settings',
                                         'Callgraph Threshold (%): <blockquote>Any funcs whose overall '
                                         'percentage of its cumtime below this threshold will be '
                                         'omitted in a callgraph</blockquote>'
                                         '<p></p>',
                                         self._thresholds, self._threshold_index, False)
        if ok:
            if eval(str(thres)) < eval(self._default_threshold):
                QMessageBox.warning(self, 'Warning',
                                    'Setting callgraph threshold too small may make the rendering of a '
                                    'callgraph very slow')
            for index in xrange(len(self._thresholds)):
                new_threshold = str(thres)
                if new_threshold == self._thresholds[index]:
                    self._threshold_index = index
                    return

    def showPieChartDialog(self):
        # show piechart dialog at the right-bottom corner of the main window
        dw, dh = self._piechart_dialog.width(), self._piechart_dialog.height()
        x = self.geometry().x() + self.geometry().width() - dw
        y = self.geometry().y() + self.geometry().height() - dh
        self._piechart_dialog.setGeometry(x, y, dw, dh)
        self._piechart_dialog.show()

    def showCallgraphDialog(self):
        pixmap = self.createCallgraph()
        if pixmap:
            self._callgraph_window.setPixmap(pixmap)
            self._callgraph_window.show()

    def showAboutDialog(self):
        QMessageBox.about(self, "About %s" % APPNAME, ABOUT)


class MyTableView(QTableView):
    def __init__(self):
        QTableView.__init__(self)

        self.setFont(DEFAULT_FONT)

        # resize row height of the table
        vheader = self.verticalHeader()
        vheader.setVisible(False)
        vheader.setResizeMode(QHeaderView.Fixed)
        vheader.setDefaultSectionSize(DEFAULT_TABLE_ROWHEIGHT)

        hheader = self.horizontalHeader()
        hheader.setResizeMode(QHeaderView.Interactive)

        self.setSortingEnabled(True)
        self.setSelectionBehavior(QAbstractItemView.SelectRows)

    def setOnSelectionChanged(self, onSelectionChanged):
        selectionModel = self.selectionModel()
        selectionModel.selectionChanged.connect(onSelectionChanged)
        return

    def setModel(self, model):
        model.sort(model.columnCount() - 1)
        QTableView.setModel(self, model)
        self.hideColumn(0)
        self.resizeColumnsToContents()


class MyTableModel(QAbstractTableModel):
    def __init__(self, stats_header, stats_table, parent=None, *args):
        QAbstractTableModel.__init__(self, parent)
        self._table_header = stats_header
        self._table_data = stats_table
        self._table_view = parent

    def rowCount(self, QModelIndex_parent=None, *args, **kwargs):
        return len(self._table_data)

    def columnCount(self, QModelIndex_parent=None, *args, **kwargs):
        return len(self._table_header)

    def data(self, index, role=Qt.DisplayRole):
        if not index.isValid():
            return QVariant()
        if role != Qt.DisplayRole:
            return QVariant()
        return QVariant(self._table_data[index.row()][index.column()])

    def headerData(self, col, orientation=Qt.Horizontal, role=Qt.DisplayRole):
        if orientation == Qt.Horizontal and role == Qt.DisplayRole:
            return QVariant(self._table_header[col])
        return QVariant()

    def sort(self, col, order=Qt.DescendingOrder):
        self.emit(SIGNAL("layoutAboutToBeChanged()"))

        def __key(rowdata):
            item = str(rowdata[col])
            try:
                x = int(item)
                return x
            except:
                try:
                    x = float(item)
                    return x
                except:
                    pass
            return item

        self._table_data.sort(key=__key)
        if order == Qt.DescendingOrder:
            self._table_data.reverse()
        if self._table_view:
            self._table_view.clearSelection()

        self.emit(SIGNAL("layoutChanged()"))


class PieChartDialog(QDialog):
    def __init__(self, title, parent=None):
        QDialog.__init__(self, parent, Qt.WindowStaysOnTopHint)
        self.setWindowTitle(title)
        self.setFixedWidth(640)
        self.setFixedHeight(320)

        self._title_base = title

        self._list_view = QListWidget()
        self._list_view.setFrameStyle(QFrame.NoFrame)

        self._pie_view = QGraphicsView()
        self._pie_view.setFrameStyle(QFrame.NoFrame)

        grid_layout = QGridLayout()
        grid_layout.addWidget(self._list_view, 0, 0, 3, 2)
        grid_layout.addWidget(self._pie_view,  0, 2, 3, 3)
        self.setLayout(grid_layout)

    def setTitleDetails(self, details):
        details = details.strip()
        title = '%s - %s' % (self._title_base, details)
        self.setWindowTitle(title)

    _colors = [
        QColor(255, 0, 0),
        QColor(255, 0, 127),
        QColor(255, 0, 255),
        QColor(127, 0, 255),
        QColor(0, 0, 255),
        QColor(0, 128, 255),
        QColor(0, 255, 128),
        QColor(153, 255, 153),
        QColor(192, 192, 192),
        QColor(224, 224, 224),
    ]

    def setData(self, data, labels):
        colors = []
        for i in range(len(data)):
            color = self._colors[i] if i < len(self._colors) else self._colors[-1]
            colors.append(color)

        total = sum(data)
        if total < 1e-9:
            self._list_view.clear()
            self._pie_view.setScene(QGraphicsScene())
            return

        pcts = []
        for item in data:
            pcts.append(1.0 * item / total * 100)

        scene = self.createPieChartScene(pcts, colors)
        self._pie_view.setScene(scene)

        self._list_view.clear()
        for color, pct, label in zip(colors, pcts, labels):
            item = QListWidgetItem('%5.2f%% %s' % (pct, label))
            item.setToolTip(label)
            pixmap = QPixmap(10, 10)
            pixmap.fill(color)
            item.setIcon(QIcon(pixmap))
            item.setTextColor(color)
            # item.setFont(DEFAULT_FONT)
            self._list_view.addItem(item)

    def createPieChartScene(self, pcts, colors):
        scene = QGraphicsScene()
        start_angle, count = 0.0, 0
        for pct in pcts:
            angle = pct / 100.0 * 16 * 360

            ellipse = QGraphicsEllipseItem(0, 0, self.height() - 48, self.height() - 48)
            ellipse.setPos(20, 20)
            ellipse.setStartAngle(start_angle)
            ellipse.setSpanAngle(angle)
            ellipse.setBrush(colors[count])
            ellipse.setToolTip('%5.2f%%' % pct)
            pen = QPen(Qt.white, 2, Qt.DotLine, Qt.RoundCap, Qt.RoundJoin)
            ellipse.setPen(pen)
            scene.addItem(ellipse)

            start_angle += angle
            count += 1
        return scene


class ImageWindow(QMainWindow):
    def __init__(self, titile, parent=None, pixmap=None):
        super(ImageWindow, self).__init__(parent)

        self._title_base = titile
        self.setWindowTitle(titile)
        self.setMinimumWidth(DEFAULT_CALLGRAPH_DLG_WIDTH)
        self.setMinimumHeight(DEFAULT_CALLGRAPH_DLG_HEIGHT)

        self.initMenuBar()

        self._pixmap = pixmap
        from ImageViewer import ImageViewer
        self._image_viewer = ImageViewer(pixmap)
        self.setCentralWidget(self._image_viewer)

    def initMenuBar(self):
        menubar = self.menuBar()

        filemenu = menubar.addMenu('&File')
        filemenu.addAction(QAction("Save As...", self,
                                   shortcut="Ctrl+S", triggered=self.saveImage))
        filemenu.addSeparator()
        filemenu.addAction(QAction("&Print...", self, enabled=False,
                                   shortcut="Ctrl+P", triggered=self.printImage))
        filemenu.addSeparator()
        filemenu.addAction(QAction("&Exit", self,
                                   shortcut=QKeySequence.Quit, triggered=self.close))

        viewmenu = menubar.addMenu('&View')

        viewmenu.addAction(QAction("Zoom &In  (25%)", self,
                                   shortcut=QKeySequence.ZoomIn,
                                   triggered=self.zoomIn))
        viewmenu.addAction(QAction("Zoom &Out (25%)", self,
                                   shortcut=QKeySequence.ZoomOut,
                                   triggered=self.zoomOut))
        viewmenu.addSeparator()
        viewmenu.addAction(QAction("Actual &Size", self,
                                   shortcut="Ctrl+=",
                                   triggered=self.setImageToActualSize))
        viewmenu.addAction(QAction("Fit &To Window", self,
                                   shortcut="Ctrl+Enter",
                                   triggered=self.fitImageToWindow))

        helpMenu = menubar.addMenu(self.tr('&Help'))
        helpMenu.addAction(QAction('&Image Controls', self, triggered=self.showControlsDialog))

    def setTitleDetails(self, details):
        self.setWindowTitle('%s - %s' % (self._title_base, details))

    def setPixmap(self, pixmap):
        self._pixmap = pixmap
        from ImageViewer import ImageViewer
        self._image_viewer = ImageViewer(pixmap)
        if pixmap.height() > self.height() or pixmap.width() > self.width():
            self._image_viewer.fitToWindow()
        self.setCentralWidget(self._image_viewer)

    def saveImage(self):
        if not self._pixmap:
            QMessageBox().information(self, 'Error', 'You have no image to be saved')
            return

        filename = QFileDialog.getSaveFileName(self, 'Save As...', 'callgraph.png', self.tr('*.png'))
        if filename:
            fp = QFile(filename)
            fp.open(QIODevice.WriteOnly)
            try:
                self._pixmap.save(fp, 'PNG')
            except Exception as e:
                fp.close()
                QMessageBox().information(self, 'Error', e.message)

    def printImage(self):
        printer = QPrinter()
        dialog = QPrintDialog(printer, self)
        if dialog.exec_():
            painter = QPainter(printer)
            rect = painter.viewport()
            size = self.imageLabel.pixmap().size()
            size.scale(rect.size(), Qt.KeepAspectRatio)
            painter.setViewport(rect.x(), rect.y(), size.width(), size.height())
            painter.setWindow(self.imageLabel.pixmap().rect())
            painter.drawPixmap(0, 0, self.imageLabel.pixmap())

    def zoomIn(self):
        self._image_viewer.zoomIn()

    def zoomOut(self):
        self._image_viewer.zoomOut()

    def setImageToActualSize(self):
        self._image_viewer.actualSize()

    def fitImageToWindow(self):
        self._image_viewer.fitToWindow()

    def showControlsDialog(self):
        QMessageBox.information(self, "Image Controls", CALLGRAPH_DLG_CONTROLS)

    def keyPressEvent(self, keyEvent):
        # overrides to enable panning while dragging. (Shift + Mouse-Left-Button)
        assert isinstance(keyEvent, QKeyEvent)
        if keyEvent.key() == Qt.Key_Shift:
            if not keyEvent.isAutoRepeat() and not self._image_viewer.handDragging:
                self._image_viewer.enableHandDrag(True)
            keyEvent.accept()
        else:
            keyEvent.ignore()
            super(ImageWindow, self).keyPressEvent(keyEvent)

    def keyReleaseEvent(self, keyEvent):
        # overrides to disable panning while dragging.
        assert isinstance(keyEvent, QKeyEvent)
        if keyEvent.key() == Qt.Key_Shift:
            if not keyEvent.isAutoRepeat() and self._image_viewer.handDragging:
                self._image_viewer.enableHandDrag(False)
            keyEvent.accept()
        else:
            keyEvent.ignore()
            super(ImageWindow, self).keyReleaseEvent(keyEvent)

    def closeEvent(self, event):
        # overrides close event to save application settings.
        # self.writeSettings()
        event.accept()

    # ------------------------------------------------------------------

    def writeSettings(self):
        settings = QSettings()
        settings.setValue('pos', self.pos())
        settings.setValue('size', self.size())
        settings.setValue('windowgeometry', self.saveGeometry())
        settings.setValue('windowstate', self.saveState())

    def readSettings(self):
        settings = QSettings()
        pos = settings.value('pos', QPoint(200, 200))
        size = settings.value('size', QSize(400, 400))
        self.move(pos)
        self.resize(size)
        if settings.contains('windowgeometry'):
            self.restoreGeometry(settings.value('windowgeometry'))
        if settings.contains('windowstate'):
            self.restoreState(settings.value('windowstate'))


def main():
    app = QApplication(sys.argv)
    window = MyWindow()
    window.show()
    sys.exit(app.exec_())


if __name__ == "__main__": 
    main()
